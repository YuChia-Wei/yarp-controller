apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.service | lower | quote }}
  labels:
    app.kubernetes.io/name: {{ .Values.service | lower | quote }}
    app.kubernetes.io/part-of: {{ .Values.system | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
  namespace: {{ .Release.Namespace | quote }}
spec:
{{- if ( default false .Values.useCanary ) }}
  # ref: https://argoproj.github.io/argo-rollouts/migrating/
  replicas: 0   # Scale down existing deployment
{{- else }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ .Values.service | lower | quote }}
      version: {{ .Values.version | quote }}
  template:
    metadata:
      labels:
        # Kubernetes recommended labels
        app.kubernetes.io/name: {{ .Values.service | lower | quote }}
        app.kubernetes.io/part-of: {{ .Values.system | quote }}
        app.kubernetes.io/version: {{ .Values.version | quote }}
        # Isio required labels
        app: {{ .Values.service | lower | quote }}
        version: {{ .Values.version | quote }}
{{- if or .Values.configMap .Values.openTelemetry }}
      annotations:
{{- if ( default false .Values.openTelemetry.enable ) }}
        checksum/otel-config: {{ include (print $.Template.BasePath "/configmap-otel-env.yaml") . | sha256sum }}
{{- end }}
{{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name | lower | quote }}
      containers:
        - name: {{ .Values.service | lower | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.imagePullPolicy | quote }}
          {{- if and .Values.openTelemetry .Values.openTelemetry.enable }}
          envFrom:
            - configMapRef:
                name: {{ (print .Values.service "-otel-env") | lower | quote }}
          {{- end }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          {{- if $.Values.env }}
            {{- range $key, $value := $.Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          ports:
{{- range .Values.ports }}
            - name: {{ .name | quote }}
              containerPort: {{ .targetPort }}
              protocol: {{ .protocol }}
{{- end }}
{{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- end }}
{{- if .Values.probes }}
{{ toYaml .Values.probes | indent 10 }}
{{- end }}
          volumeMounts:
            - name: {{ (print .Values.service "-auth-config") | quote }}
              mountPath: {{ "/app/Coniguration/Authentication/" | quote }}
            - name: {{ (print .Values.service "-yarp-config") | quote }}
              mountPath: {{ "/app/Coniguration/ReverseProxy/" | quote }}
      volumes:
        - name: {{ (print .Values.service "-auth-config") | quote }}
          configMap:
            name: {{ (print .Values.service "-auth-config") | quote }}
        - name: {{ (print .Values.service "-yarp-config") | quote }}
          configMap:
            name: {{ (print .Values.service "-yarp-config") | quote }}

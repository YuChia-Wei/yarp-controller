# Default values for yarp-gateway.
# This is a YAML-formatted file.

# Use Canary - Should be install ArgoRollout
useCanary: false

# The overall system your service is a part of
# This Value is used by Label: app.kubernetes.io/part-of
system: yarp-gateway

# The name of your service
# This Value is used by Label:
#     1. app.kubernetes.io/name
#     2. app
# This Value is used by Docker Container:
#     1. name
# This Value is Named to kubernetes kind:
#     1. Service
#     2. DestinationRule
#     3. Gateway (service name-gateway)
#     4. VisualService (service name-vs)
#     5. HorizontalPodAutoscaler
#     6. Deployment
#     7. PodDisruptionBudget
service: yarp-gateway

# The major version number for your service
version: 1

# Istio Ingress Gateway
# 這是 Istio 預設的 LoadBalance Gateway Selector Label name，與範本檔案中的 gateway.yaml 所設定的 Gateway 是不一樣的服務
# 這個服務等同於 Kubernetes Ingress
istioIngressGateway: "yarp-ingressgateway"

# Docker settings
image:
  # The name of your docker container
  repository: "ghcr.io/yuchia-wei/yarp-gateway"
  # Your docker container's tag
  tag: "v0.0.2"
  imagePullPolicy: IfNotPresent

# Istio uses the service account name as a component of the service's security
# identity. Set "create" to false to use an previously created service account.
serviceAccount:
  name: yarp-gateway-sa
  create: true

# The initial number of pod replicas to run for your service
replicaCount: 1

# The maximum number of pods from that set that can be unavailable at once
maxUnavailable: 1

# deployment / rollout history limit
revisionHistoryLimit: 3

# Horizontal pod autoscaler configuration (optional)
autoscaling:
  minReplicas: 1
  maxReplicas: 5
  targetAverageCpuUtilization: 90

# Port settings
# Ports must be named <protocol>[-<suffix>] to work with Istio.
# Valid protocols are grpc, http, http2, https, mongo, mysql, redis, tcp, tls, udp
ports:
  - name: grpc-svc
    port: 8443
    targetPort: 443
    protocol: TCP
  - name: http-status
    port: 8080
    targetPort: 80
    protocol: TCP

# VisualService 中的 http 內部 http request 設定
httpHeaders:
  request:
    set:
      x-forwarded-proto: https

# Configure the Istio ingress gateway to route outside traffic for the provided
# host name to this service on the ports and protocols defined in the 'ports' section
# above.
istioGateway:
  name: yarp-gateway
  host: "app.local.vm"
  matchPrefix:
    - "/"
  uriRewrite: "/"

# 服務超過多少時間回應 Gateway Timeout
# The overall timeout for requests to this service
# Optional
overallTimeout: 30s

# 自動重試次數、重試時，該次重試的 Timeout 時間
# Client retry settings (use Istio syntax)
# Optional
retries:
  attempts: 3
  perTryTimeout: 10s

# Circuit breaker settings (use Istio syntax)
# Optional
outlierDetection:
  consecutive5xxErrors: 5

# Resource settings (use Kubernetes syntax)
# Optional
resources:
  requests:
    memory: "400Mi"
    cpu: "400m"
  limits:
    memory: "800Mi"
    cpu: "800m"

# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# Probe settings (use Kubernetes syntax)
# Optional
# 以下設定參數可依據服務狀況加入
# initialDelaySeconds = 等待幾秒後再開始第一次檢測，可避免容器啟動過久導致初期錯誤與誤重啟，預設 0 秒
# failureThreshold = 碰到失敗或 timeout 時，要重試的次數，預設 3 次，最小 1 次
# periodSeconds = 每次探測間隔，預設 10 秒，最小 1 秒
# timeoutSeconds = 每次檢測時的 timeout 時長，預設 1 秒，如果已知服務的 health 頁面會很慢時可調整
probes:
  # 服務啟動狀態檢測，通過後就會開始 liveness, readiness 探測
  # 有設定 startup probe 就可以評估移除 liveness/readiness 的 initialDelaySeconds
  startupProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 5
    failureThreshold: 3
    periodSeconds: 10
  # 服務存活狀態檢測
  livenessProbe:
    httpGet:
      path: /health
      port: 80
  # 服務就緒狀態檢測
  readinessProbe:
    httpGet:
      path: /health
      port: 80

# .net 的追蹤設定，docker 建置時需要使用含有 open telemetry auto instrumentation 此工具的容器基底
openTelemetry:
  enable: true
  otlpEndpoint: "http://otel-collector.open-telemetry.svc.cluster.local:4317"
  otlpProtocol: "grpc"
  autoLogs: "true"
  enableCLRProfiler: "1"

yarpConfig:
  ClustersSettingFile: "yarpConfig/ClustersSetting.json"
  RoutesSettingFile: "yarpConfig/RoutesSetting.json"

AuthSetting:
  Default: "Jwt"
  Jwt:
    Authority: "http://localhost:8080"
    Audience: "--"
    RequireHttpsMetadata: "true"
  Opid:
    ClientId: "test_client"
    ClientSecret: "6ZyOGaalxmk0NIZCg9w81lIU9bxnDL4P"
    Authority: "http://localhost:8080/realms/master/"
    WebApiAudience:
      - "profile"
      - "roles"
    LoginApplicationName: "my_app"
    LoginCookieName: "local_login"
#    LoginCookieDomain: ""
    TicketStoreRedisServer: "redis-cluster-leader-headless.cache.svc.cluster.local:6379"
    RequireHttpsMetadata: "false"
    ResponseType: "code"
    RefreshTokenAddress: "http://localhost:8080/realms/master/protocol/openid-connect/token"

# 設定容器執行時的參數
env:
  # 語言設定，依據 docker image 的 image base 使用的 linux 版本決定此參數是否有效
  LANG: "zh_TW.UTF-8"
  # 時區資訊
  TZ: "Asia/Taipei"
  # .net 執行環境
  ASPNETCORE_ENVIRONMENT: "Release"
  # .net 8 之後如果要繼續使用 80 port 的話要加上這個參數
  ASPNETCORE_HTTP_PORTS: "80"